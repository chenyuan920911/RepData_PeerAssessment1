f1<-gl(2,5)
f2<-gl(5,2)
interaction(f1,f2)
x<-rnorm(10)
split(x,list(f1,f2))
split(x,list(f1,f2),drop=TRUE)
x<-rnorm(10)
split(x,list(f1,f2),drop=TRUE)
?array
array(x=rnorm(2*2*2*2),c(2,2,2,2))
array(rnorm(2*2*2*2),c(2,2,2,2))
a<-array(rnorm(2*2*2*2),c(2,2,2,2))
a[,,1,1]
a[,1,1,1]
a
dims(a)
dimension
?dim
dim(a)
?rowMeans
rowMeans(a,dims=1)
rowMeans(a,dims=2)
rowMeans(a,dims=3)
rowMeans(a,dims=4)
a<-array(rnorm(2*2*2),c(2,2,2))
a
rowMeans(a,dims=1)
rowMeans(a,dims=2)
rowMeans(a[,,1])
rowMeans(a[,,2])
mean(-0.2149518,0.3237105)
mean(-0.2438635,0.09479351)
mean(-0.2428635,008)
mean(-0.2428635,0.9486790,0.09479351,01.14123887)
mean(c(-0.2428635,0.9486790,0.09479351,01.14123887))
mean(c(-0.2149518,0.3237105))
mean(c(-0.2438635,0.09479351))
x<-matrix(1:4,2,2)
x
rowMeans(x)
rowMeans(x,dims=1)
rowMeans(x,dims=2)
printmessage<-function(x)
{if(x>0) print("x>0")
else print("x<0")
}
printmessage(1)
printmessage(NA)
printmessage<-function(x)
{+ {if(x>0) print("x>0")
+ else print("x<0")
+ invisible(x)
try<-function(x){
x^2
}
try2<-function(x){
+   x^2
+ }
try2<-function(x){x^2 }
try3<-function(x){x^2
invisible(x)}
try3(3)
try(3)
a<-try3(3)
a
cachematrix.R
library("swirl")
swirl()
3
swirl()
sqrt(2)
a<-sqrt(2)/2
a
dnorm(1)
dnorm(0)
?dnorm
dnorm(
.5)
dnorm(0.5)
dnorm(Inf)
dnorm(-Inf)
qnorm(1)
pnorm(1)
qnorm(0)
qnorm(1)
qnorm(0.5)
dnorm(0.5)
dnorm(-0.5)
?sd
x<-norm(20)
x<-rnorm(20,20,2)
summary(x)
sd(x)
set.seed(1)
rnorm(3)
rnorm(3)
set.seed(1)
rnorm(3)
set.seed(3)
rnorm(3)
set.seed(1)
rnorm(3)
set.seed(3)
rnorm(3)
set.seed(20)
x<-norm(100)
x<-rnorm(100)
x
set.seed(20)
x
e<-rnorm(100,0,2)
y<-0.5+2*x+e
summary(y)
plot(x,y)
set.seed(20)
x <- rnorm(100)
e <- rnorm(100,0,4)
y<- 0.5 + 2*x + e
summary(y)
plot(x,y)
e <- rnorm(100,0,4)
plot(x,y)
head("http://www.baidu.com")
?head
head(readLines("https://www.baidu.com"))
head(readLines("www.nju.edu.cn"))
?readLines
readLines("C:\Uses\cy\desktop\R\specdata\001.csv")
readLines("C:/Uses/cy/desktop/R/specdata/001.csv")
readLines("C:/Users/cy/desktop/R/specdata/001.csv")
head("C:/Users/cy/desktop/R/specdata/001.csv")
head(readLines("C:/Users/cy/desktop/R/specdata/001.csv"))
Rprof()
summaryRprof
summaryRprof()
Rprof(readLines("C:/Users/cy/desktop/R/specdata/001.csv"))
Rprof("readLines("C:/Users/cy/desktop/R/specdata/001.csv")")
lm(y~x)
?lm
group <- gl(2,10,20,lables=c("Ctl","Trt"))
group <- gl(2,10,20,labels=c("Ctl","Trt"))
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
weight <- c(ctl, trt)
group
?gl
gl(2,10,labels=c("w","m"))
?lm
lm.D9 <- lm(weight ~ group)
lm.D9
lm.D90 <- lm(weight ~ group - 1)
lm.D90
plot(weight,group)
x<-1:10
y<-2*x
y
lm(y~x)
y<-2*x+10
lm(y~x)
anova(lm.D9)
?anova
summary(lm.D90)
plot(lm.D9,las=1)
opar <- par(mfrow = c(2,2), oma = c(0, 0, 1.1, 0))
?par
par(opar)
plot(lm.D9,las=1)
plot(lm.D90,las=1)
library(datasets)
Rprof()
fit <- lm(y ~ x1+x2)
Rrof(NULL)
file <- read.csv("C:\Users\cy\desktop\college.csv")
file <- read.csv("C:/Users/cy/desktop/college.csv")
file <- read.csv("C:/Users/cy/desktop/college.sav")
file
file <- read.file("C:/Users/cy/desktop/college.sav")
file <- read.tex("C:/Users/cy/desktop/college.sav")
file <- read.text("C:/Users/cy/desktop/college.sav")
??read
file <- read.spss("C:/Users/cy/desktop/college.sav")
library("foreign")
file <- read.spss("C:/Users/cy/desktop/college.sav")
file
class(file)
??logistc
??logistic
library(nnet)
college <- file$COLLEGE
gender <- file$GENDER
meangr <- file$MEANGR
keysch <- file$KEYSCH
multinom(college~,data=file)
multinom(formula=college~,data=file)
multinom(formula=college~c(gender,meangr,keysch),data=file)
c<-c(gender,meangr,keysch)
gl(3,1000,labels=c("GENDER","MEANGR","KEYSCH")
)
group=gl(3,1000,labels=c("GENDER","MEANGR","KEYSCH")
)
c
try <- multinom(c~group)
try <- multinom(c~group,c)
try <- multinom(c~group,file)
library(XML)
library("XML")
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl,useInternal=TRUE)
install.packages("XML", repos = "http://www.omegahat.org/R")
library(XML)
install.packages("XML")
library(XML)
library(rJava)
install.packages(rJava)
install.packages("rJava")
library(rJava)
library(xlsx)
x <- norm(100)
x <- rnorm(100)
hist (x)
y <- rnorm(100)
plot(x,y)
examole(points)
example(points)
rnorm()
?rnorm
library(dataset)
library(datasets)
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyer Data")
?read.csv
readLines("C:/Users/cy/desktop/exploratory data analysis/household_power_consumption.txt")
?readLines
?read.file
read.table
?read.table
file <- read.table("C:/Users/cy/desktop/exploratory data analysis/household_power_consumption.txt", sep=";",na.strings = "?")
file[1,]
file <- read.table("C:/Users/cy/desktop/exploratory data analysis/household_power_consumption.txt", sep=";",na.strings = "?", header = TRUE)
file[1,]
file[2,]
?head
head(file, 10)
classes(file[,1])
class(file[,1])
head(file$Date,10)
strtime(file[,1])
strptime(file[,1])
?strptime
strptime(file[,1],"%D-%m-%Y")
head(file$Date,10)
strptime(file[,1], "%d/%m/%y")
head(file$Date,10)
file$Date <- strptime(file$Date, "%d/%m/%Y")
head(file$Date,10)
file <- read.table("C:/Users/cy/desktop/exploratory data analysis/household_power_consumption.txt", sep=";",na.strings = "?", header = TRUE)
str(file)
file["02/02/2007",]
file["01/02/2007"]
file["01/02/2007",]
file["1/2/2007",]
library(sqldf)
download.packages(sqldf)
install.packages(sqldf)
install.packages("ggplot2")
install.packages("sqldf")
library(ggplot2)
??kernlab
install.packages("kernlab")
library(kernlab)
data(spam)
str(spam[,1:5])
date()
testdat <- data.frame(x=1:100,  y= rnorm(100))
testdat[50, 2] <- 100
plot(testdat$x, testdat$y, type="l", ylim= c(-3,3))
plot(testdat$x, testdat$y, type="l")
library(ggplot2)
g <- ggplot(testdat, aes(x=x,y=y))
g+geom_line
g+geom_line()
library(kernlab)
data(spam)
set.seed(3435)
trainIndicator =  rbinom(4601, size = 1, prob =0.5)
table(trainIndicator)
?table
?rbinom
trainSpam = spam[trainIndicator == 1, ]
testSpam = spam[trainIndicator == 0, ]
trainSpam$numType = as.numeric(trainSpam$Type) -1
head(trainSpam)
classes(trainSpam$type)
class(trainSpam$type)
trainSpam$numType
trainSpam$numType
plot(trainSpam$captialAve ~ trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$captialAve + 1) ~ trainSpam$type)
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
plot(log10(trainSpam[,1:4]+1))
trainSpam$numType = as.numeric(trainSpam$Type) -1
trainSpam$numType = as.numeric(trainSpam$type) -1
costFunction = function(x,y) sum(x != (y > 0.5))
cvError = rep(NA, 55)
library(boot)
for( i in 1:55){ lmFormula = reformulate(names(trainSpam)[i], response = "numType") glmFit = glm(lmFormula, family = "binomial", data = trainSpam) cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]}
for(i in 1:55){
lmFormula = reformulate(names(trainSpam)[i], response="numType")
glmFit = glm(lmFormula, family = "binomial" , data =trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
install.packages("xlsx")
install.packages("XML")
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xmk"
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal = TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
?xmlTreeParse
?xmlRoot
names(rootNode)
rootNode
class(rootNode)
rootNode[1]
rootNode[1,1]
rootNode[[1]]
xmlSApply(rootNode, xmlValue)
?xmlSApply
?xpath
??xpath
xpathSApply(rootNode,"//name", xmlValue)
fileUrl <- "http://espn.go.com/nfl/team/_/name/bal/baltimore-ravens"
doc <- htmlTreeParse(fileUrl, useInternal =TRUE)
scores <- xpathSApply(doc, "//li[@class ='score']",xmlValue)
teams <+ xpathSApply(doc, "//li[@class ='team-name']")
teams <- xpathSApply(doc, "//li[@class ='team-name']")
scores
teams
teams <- xpathSApply(doc, "//li[@class ='team-name']",xmlValue)
teams
scores <- xpathSApply(doc, "//li[@class ='score']",xmlValue)
scores
install.packages("jsonlite")
library(jsonlite)
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
install.packages("httr")
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
names(jsonData)
library(datasets)
myjson <- toJSON(iris, pretty = TRUE)
cat(myjson)
install.packages("xtable")
setwd("C:/Users/cy/desktop/reproducible research/repdata-data-activity")
data <- read.csv("activity.csv")
Total <- tapply(data$steps, data$date, sum)
hist(Total)
library(stats)
Mean <- mean(Total, na.rm = TRUE);
Median <- median(Total, na.rm = TRUE)
Average <- tapply(data$steps, data$date, mean, na.rm = TRUE)
Average
Average <- tapply(data$steps, data$date, mean)
Average
plot(x = data$interval, y = Average)
?plot
?plot
class(data$interval)
data$interval
int <- as.factor(data$interval)
int
Average.day <- tapply(data$steps, data$interval, mean)
Average.day
Average.day <- tapply(data$steps, data$interval, mean, na.rm=TRUE)
Average.day
plot(x = data$interval, y = Average.day,type = "l",xlab = "Interval", ylab = "Number of steps")
?seq
?weekdays
date()
weekdays(date())
weekdays("2014-8-17")
Max <- max(Average.day)
Max
uni <- unique(data$internal)
uni[Average.day == Max]
Average.day == Max
sum(Average.day == Max)
uni[1]
class(uni)
uni
unique(data$internal)
?unique
unique(data$interval)
unique(data$interval)
uni <- unique(data$interval)
uni[Average.day == Max]
rep(c(1,2,3),3)
rep(c(1,2,3),each=3)
288*835
Interval <- unique(data$interval)
AveInt <- tapply(data$steps, data$interval, mean, na.rm=TRUE)
AveInt
17568/288
?factor
?levels
levels(data$date)
num(levels(data$date))
nlevels(data$date)
nrow(data)
rep <- rep(AveInt, each = nlevels(data$date))
steps <- rep(0, nrow(data))
steps[logic] <- rep[logic]
steps[!logic] <- data$steps[!logic]
NewData <- data.frame(steps=steps, interval=data$interval, date=data$date)
logic <- is.na(data$steps)
sum(logic)
rep <- rep(AveInt, each = nlevels(data$date))
steps <- rep(0, nrow(data))
steps[logic] <- rep[logic]
steps[!logic] <- data$steps[!logic]
NewData <- data.frame(steps=steps, interval=data$interval, date=data$date)
sum(is.na(NewData$steps))
summary(NewData)
data$date
?POXIt
time <- sapply(data$date, strptime, "%Y-%m-%d")
time[1:5]
time
time <- lapply(data$date, strptime, "%Y-%m-%d")
class(time)
time
?apply
time<- strptime(data$date, "%Y-%m-%d")
time
data$date <- time
class(data$date)
weekday(time)
weekdays(time)
fac <- factor(time)
?sort.list
fac <- sort.list(time)
weekdays(time)
week <- weekdays(time)
logic <- （week=="星期六"||week==”星期日“)
logic <- (week=="星期六"||week==”星期日“)
logic <- (week=="星期六"||week=="星期日")
logic[1:100]
week
logic[1:100]
logic <- (week=="星期六"|week=="星期日")
logic[1:100]
f <- factor(logic, lables= c("weekday", "weekend"))
f <- factor(logic, labels= c("weekday", "weekend"))
factor
f
df <- data.frame(data, week <- f)
head(df)
df <- data.frame(data, week=f)
df <- data.frame(data, week=f)
head(df)
library(lattice)
?xyplot
weekend <- df[week = "weekend",]
weekend <- df[week == "weekend",]
?plot
time<- strptime(data$date, "%Y-%m-%d")
week <- weekdays(time)
logic <- (week == "星期六"|week == "星期日")
f <- factor(logic, lablels = c("weekday","weekend"))
f <- factor(logic, labels = c("weekday","weekend"))
DF <- data.frame(data, week = f)
library(lattice)
weekday <- DF[week == "weekday",]
weekend <- DF[week == "weekend",]
AveWeekday <- tapply(weekday$steps, weekday$interval, mean)
AveWeekend <- tapply(weekend$steps, weekend$interval, mean)
AveWeekday <- tapply(weekday$steps, weekday$interval, mean, na.rm = TRUE)
AveWeekend <- tapply(weekend$steps, weekend$interval, mean, na.rm = TRUE)
plot(x = Interval,y = AveWeekday)
length(y)
length(AveWeekday)
AveWeekday
AveWeekday <- tapply(weekday$steps, weekday$interval, mean, na.rm = TRUE)
AveWeekday
Weekday
weekday
DF[week == "weekday"]
DF[week == "weekday",]
DF[,week == "weekday"]
DF[,week == "weekday",]
DF
DT <- data.table(DF)
library(datatable)
instal.packages("datatable")
install.packages("datatable")
weekday <- subset(DF, week = "weekday")
weekday
library(lattice)
weekday <- subset(DF, week = "weekday")
weekend <- subset(DF, week = "weekend")
AveWeekday <- tapply(weekday$steps, weekday$interval, mean, na.rm = TRUE)
AveWeekend <- tapply(weekend$steps, weekend$interval, mean, na.rm = TRUE)
df <- data.frame(mean = c(AveWeekday, AveWeekend), interval = rep(Interval,2), Week= factor(rep(c(0,1), each = length(Interval)), labels=c("Weekdays", "Weekend")))
xyplot(mean ~ interval|Week, data=df, layout = c(1,2), type = "l")
AveWeekday
AveWeekend
getwd()
knit2html("PA1_template.md")
library(knitr)
knit2html("PA1_template.md")
knit2html("PA1_template.rmd")
